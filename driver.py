import numpy as np
import decision_trees as dt
# Write-Up 2
#[[1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1]]
#[[1], [1], [0], [1], [0], [1], [1], [0]]
# DT_make_prediction
#[[0, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0]]
#[[0], [1], [0]]
# Write-Up 3
#[[4.8, 3.4, 1.9, 0.2], [5, 3, 1.6, 1.2], [5, 3.4, 1.6, 0.2], [5.2, 3.5, 1.5, 0.2], [5.2, 3.4, 1.4, 0.2], [4.7, 3.2, 1.6, 0.2], [4.8, 3.1, 1.6, 0.2], [5.4, 3.4, 1.5, 0.4], [7, 3.2, 4.7, 1.4], [6.4, 3.2, 4.7, 1.5], [6.9, 3.1, 4.9, 1.5], [5.5, 2.3, 4, 1.3], [6.5, 2.8, 4.6, 1.5], [5.7, 2.8, 4.5, 1.3], [6.3, 3.3, 4.7, 1.6], [4.9, 2.4, 3.3, 1]]
#[[1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [0]]
test_binX = np.array([[0,1,0,1],[1,1,1,1],[0,0,0,1]])
test_binY = np.array([[1],[1],[0]])



trainingX1 = np.array([[0,1],[0,0],[1,0],[0,0],[1,1]])
trainingY1 = np.array([[1],[0],[0],[0],[1]])
valX1 = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
valY1 = np.array([[0], [1], [0], [1]])
testingX1 = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
testingY1 = np.array([[1], [1], [0], [1]])

trainingX2 = np.array([[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 0], [1, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 0]])
trainingY2 = np.array([[0], [1], [0], [0], [1], [0], [1], [1], [1]])
valX2 = np.array([[1, 0, 0, 0], [0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 0], [1, 0, 0, 1], [0, 1, 0, 0]])
valY2 = np.array([[0], [0], [1], [0], [1], [1]])
testingX2 = np.array([[0, 1, 0, 0], [0, 0, 0, 1], [1, 0, 0, 0], [0, 0, 1, 1], [1, 1, 0, 1], [1, 1, 0, 0], [1, 0, 0, 1], [0, 1, 0, 1], [0, 1, 0, 0]])
testingY2 = np.array([[1], [1], [0], [0], [1], [0], [1], [1], [1]])




RealX = np.array([[0, 1, 1, 1, 0, 1, 0], [0, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 1, 0, 0]])
RealY = np.array([[1], [1], [1], [1], [1], [1], [1], [1], [0], [0], [0], [0], [0], [0], [0], [0]])

max_depth = 1
DT = dt.DT_train_binary(trainingX2,trainingY2, max_depth)
print()
DT.toString()
test_acc = dt.DT_test_binary(trainingX2,trainingY2,DT)
print(test_acc)

#DT_train_real(X,Y,max_depth):
#DT_test_real(X,Y,DT):
#DT_train_real_best(X_train,Y_train,X_val,Y_val):

#DT_train_binary_best(X_train, Y_train, X_val, Y_val):
